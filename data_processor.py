import tqdm

from feature.feature_manager import FeatureManager
from utils.utils import get_file_name, get_malware_info
from elasticsearch_connector import ElasticsearchConnector
from conf.elasticsearch_settings import INDEX_NAME_OF_RAW, INDEX_SCHEMA_OF_RAW, INDEX_SCHEMA_OF_FEATURE


class DataProcessor:
    def __init__(self, host="localhost", port=9200):
        self._connector = ElasticsearchConnector(host, port)

    def _initialize_index(self):
        if not self._connector.is_existed_index(index_name="raw"):
            is_created = self._connector.create_index(index_name=INDEX_NAME_OF_RAW, index_schema=INDEX_SCHEMA_OF_RAW)
            if is_created is False:
                raise Exception("[ERROR] Can not initialize index.")

    def insert_raw_data(self, file_list):
        json_list = list()

        for path in file_list:
            uid = get_file_name(path)
            data = {"_index": INDEX_NAME_OF_RAW,
                    "_id": uid,
                    "_source": {"BINARY_FILE_PATH": path,
                                "FEATURES": []}}

            json_list.append(data)

        is_inserted = self._connector.bulk_data(json_list)

        return is_inserted

    def update_json_info(self, file_list):
        json_list = list()

        for path in tqdm.tqdm(file_list):
            uid = get_file_name(path)
            _search = self._connector.search_data(index_name=INDEX_NAME_OF_RAW, uid=uid)
            if _search["found"] is False:
                continue

            malware_info = get_malware_info(path)
            if malware_info is None:
                continue

            is_malware = False if malware_info[0] == "Benign" else True
            data = {"_op_type": "update",
                    "_index": INDEX_NAME_OF_RAW,
                    "_id": uid,
                    "doc": {"FILE_TYPE": malware_info[1],
                            "JSON_PATH": path,
                            "IS_MALWARE": is_malware}}

            if is_malware is True:
                data["doc"]["MALWARE_TYPE"] = malware_info[0]

            json_list.append(data)

        is_updated = self._connector.bulk_data(json_list)

        return is_updated

    def insert_feature(self, file_list, feature_obj, params=None):
        feature_manager = FeatureManager()
        feature_list = feature_manager.extract_feature(file_list, feature_obj, params)

        feature_name = feature_obj.__name__.lower()
        if not self._connector.is_existed_index(index_name=feature_name):
            is_created = self._connector.create_index(index_name=feature_name, index_schema=INDEX_SCHEMA_OF_FEATURE)
            if is_created is False:
                raise Exception("[ERROR] Can not create feature index.")

        feature_json_list = list()
        update_json_list = list()
        for uid, values in feature_list:
            feature_json_list.append({"_index": feature_name,
                                      "_id": uid,
                                      "_source": {"DATA": " ".join(values),
                                                  "NUMBER_OF_ATTRIBUTES": len(values)}})

            update_json_list.append({"_op_type": "update",
                                     "_index": INDEX_NAME_OF_RAW,
                                     "_id": uid,
                                     "script": {"inline": "ctx._source.FEATURES.add(params.Feature)",
                                                "params": {"Feature": feature_name}}})

        is_feature_inserted = self._connector.bulk_data(feature_json_list)
        if is_feature_inserted is False:
            return False

        is_feature_updated = self._connector.bulk_data(update_json_list)
        if is_feature_updated is False:
            return False

        return True

    def close(self):
        self._connector.close()