
from elasticsearch import Elasticsearch, exceptions, helpers


class ElasticsearchConnector:
    def __init__(self, host="localhost", port=9200):
        self._client = Elasticsearch([{"host": host, "port": port}])
        if not self._client.ping():
            raise Exception("[ERROR] Invalid Elasticsearch connection.")

    def create_index(self, index_name, index_schema):
        is_created = False

        try:
            if not self.is_existed_index(index_name):
                self._client.indices.create(index=index_name, body=index_schema)
                is_created = True

            else:
                print("[ERROR] {0} already exist.".format(index_name))

        except Exception as e:
            print(e)

        return is_created

    def is_existed_index(self, index_name):
        if self._client.indices.exists(index_name):
            return True

        return False

    def delete_index(self, index_name):
        is_deleted = False

        try:
            self._client.indices.delete(index=index_name)
            is_deleted = True

        except Exception as e:
            print(e)

        return is_deleted

    def search_data(self, index_name, uid):
        try:
            response = self._client.get(index=index_name, id=uid)

        except exceptions.NotFoundError:
            response = dict()
            response["found"] = False

        return response

    def bulk_data(self, json_list):
        is_inserted = False

        try:
            helpers.bulk(client=self._client, actions=json_list)
            is_inserted = True

        except Exception as e:
            print(e)

        return is_inserted

    def delete_data(self, index_name, uid_list):
        if not isinstance(uid_list, list):
            uid_list = list(uid_list)

        is_deleted = False
        json_list = [{"_op_type": "delete", "_index": index_name, "_id": uid} for uid in uid_list]
        try:
            helpers.bulk(client=self._client, actions=json_list)
            is_deleted = True

        except Exception as e:
            print(e)

        return is_deleted

    def close(self):
        self._client.close()