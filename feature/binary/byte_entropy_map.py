import numpy as np


class ByteEntropyMap:
    def __init__(self, window_size=1024, stride=256, histogram_size=16):
        self.window_size = window_size
        self.stride = stride
        self.histogram_size = histogram_size

        self.row_cut = np.round(0.5 / self.histogram_size, 4)
        self.column_cut = np.ceil(256 / self.histogram_size)

        self.entropy_matrix = None

    def fit(self, path):
        with open(path, "rb") as file_descriptor:
            byte_sequence = list(file_descriptor.read())

        entropy_list, byte_histogram_list = self._slide_window(byte_sequence)
        self.entropy_matrix = self._map_values(entropy_list, byte_histogram_list)

    def _slide_window(self, byte_sequence):
        entropy_list = list()
        byte_histogram_list = list()

        for index in range(0, len(byte_sequence) - self.window_size + 1, self.stride):
            subsequence = byte_sequence[index: index + self.window_size]

            byte_histogram = np.array([subsequence.count(byte_value) for byte_value in range(0, 256)])
            byte_frequency = (byte_histogram / float(len(subsequence))) + 1e-10
            entropy = self.get_entropy(byte_frequency)

            entropy_list.append(entropy)
            byte_histogram_list.append(byte_histogram)

        return entropy_list, byte_histogram_list

    @staticmethod
    def get_entropy(byte_frequency):
        return -(np.log(byte_frequency) * byte_frequency)

    def _map_values(self, entropy_list, byte_histogram_list):
        entropy_matrix = np.zeros((self.histogram_size, self.histogram_size), dtype=int)

        for entropy, byte_histogram in zip(entropy_list, byte_histogram_list):
            for byte_value in range(0, 256):
                row_index = int(entropy[byte_value] / self.row_cut)
                column_index = int(byte_value / self.column_cut)

                entropy_matrix[row_index, column_index] += byte_histogram[byte_value]

        return entropy_matrix

    def get_string(self):
        if self.entropy_matrix is None:
            return None

        features = list()
        for index, value in enumerate(self.entropy_matrix.reshape(-1)):
            features.append("{0}:{1}".format(index, value))

        return features
