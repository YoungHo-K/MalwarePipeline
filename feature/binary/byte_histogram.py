import numpy as np


class ByteHistogram:
    def __init__(self, window_size=1024, stride=256):
        self.window_size = window_size
        self.stride = stride

        self.byte_histogram = None

    def fit(self, path):
        with open(path, "rb") as file_descriptor:
            byte_sequence = list(file_descriptor.read())

        byte_histogram = np.zeros(256)
        for index in range(0, len(byte_sequence) - self.window_size + 1, self.stride):
            subsequence = byte_sequence[index: index + self.window_size]

            for byte_value in range(0, 256):
                byte_histogram[byte_value] += subsequence.count(byte_value)

        self.byte_histogram = byte_histogram

    def get_string(self):
        if self.byte_histogram is None:
            return None

        features = list()
        for index, value in enumerate(self.byte_histogram):
            features.append("{0}:{1}".format(index, value))

        return features
