import numpy as np


class EntropyImage:
    def __init__(self, window_size=2, stride=1, divide_size=256):
        self.window_size = window_size
        self.stride = stride
        self.divide_size = divide_size

        self.entropy_image = None

    def fit(self, path):
        with open(path, "rb") as file_descriptor:
            byte_sequence = list(file_descriptor.read())

        entropy_list = self._divide(byte_sequence)
        local_entropy_image = self._generate_local_entropy_image(entropy_list)
        self.entropy_image = self._generate_entropy_image(local_entropy_image) * 128

    def _divide(self, byte_sequence):
        entropy_list = list()

        for index in range(0, len(byte_sequence), self.divide_size):
            subsequence = byte_sequence[index: index + self.divide_size]

            byte_histogram = np.array([subsequence.count(byte_value) for byte_value in range(0, 256)])
            byte_frequency = (byte_histogram / float(len(subsequence))) + 1e-10
            entropy = self.get_entropy(byte_frequency)

            entropy_list.append(entropy)

        return entropy_list

    @staticmethod
    def get_entropy(byte_frequency):
        return -np.sum(np.log(byte_frequency) * byte_frequency)

    @staticmethod
    def _generate_local_entropy_image(entropy_list):
        local_entropy_image = np.zeros(len(entropy_list))

        for index, entropy in enumerate(entropy_list):
            value = np.ceil(2 ** entropy - 1)
            local_entropy_image[index] = int(value)

        return local_entropy_image

    def _generate_entropy_image(self, local_entropy_image):
        entropy_image = np.zeros((256, 256))

        total_pairs = 0
        pair_dict = dict()
        for index in range(0, len(local_entropy_image) - self.window_size - 1, self.stride):
            data_pair = local_entropy_image[index: index + self.window_size]
            total_pairs += 1

            key = "{0}, {1}".format(data_pair[0], data_pair[1])
            if key in pair_dict.keys():
                pair_dict[key] += 1

            else:
                pair_dict[key] = 1

        for key in pair_dict.keys():
            pair = key.split(", ")
            x = int(float(pair[0]))
            y = int(float(pair[1]))

            frequency = pair_dict[key]
            entropy_image[x, y] = int(np.ceil(255 * (frequency / float(total_pairs))))

        return entropy_image

    def get_string(self):
        if self.entropy_image is None:
            return None

        features = list()
        for index, value in enumerate(self.entropy_image.reshape(-1)):
            features.append("{0}:{1}".format(index, value))

        return features
