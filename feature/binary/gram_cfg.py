import numpy as np


class GramCFG:
    def __init__(self, N=2):
        self.N = N

        self.gram_cfg = None

    def fit(self, path):
        with open(path, "rb") as file_descriptor:
            byte_sequence = list(file_descriptor.read())

        gram_list = self._convert_ngram(byte_sequence)
        self.gram_cfg = self._generate_cfg(gram_list)

    def _convert_ngram(self, byte_sequence):
        gram_list = list()

        for index in range(0, len(byte_sequence) - self.N - 1):
            subsequence = byte_sequence[index: index + self.N]
            subsequence = map(lambda x: hex(x)[2:].upper(), subsequence)

            gram_list.append(" ".join(subsequence))

        return gram_list

    @staticmethod
    def _generate_cfg(gram_list):
        gram_cfg = np.zeros((256, 256))

        for gram in gram_list:
            indexes = gram.split()
            indexes = list(map(lambda x: int(x, 16), indexes))

            gram_cfg[indexes[0], indexes[1]] += 1

        return gram_cfg

    def get_string(self):
        if self.gram_cfg is None:
            return None

        features = list()
        for index, value in enumerate(self.gram_cfg.reshape(-1)):
            features.append("{0}:{1}".format(index, value))

        return features
