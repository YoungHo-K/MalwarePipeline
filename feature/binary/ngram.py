

class Ngram:
    def __init__(self, N=2):
        self.N = N

        self.gram_dict = None

    def fit(self, path):
        with open(path, "rb") as file_descriptor:
            byte_sequence = list(file_descriptor.read())

        gram_dict = dict()
        for index in range(0, len(byte_sequence) - self.N):
            subsequence = byte_sequence[index: index + self.N]
            subsequence = map(lambda x: hex(x)[2:].upper(), subsequence)

            key = "".join(subsequence)
            if key in gram_dict.keys():
                gram_dict[key] += 1

            else:
                gram_dict[key] = 1

        self.gram_dict = gram_dict

    def get_string(self):
        if self.gram_dict is None:
            return None

        features = list()
        for key, value in self.gram_dict.items():
            features.append("{0}:{1}".format(key, value))

        return features
            