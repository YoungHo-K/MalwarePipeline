import os
import argparse

from utils.utils import retrieve
from data_processor import DataProcessor

from feature.binary.ngram import Ngram
from feature.binary.gram_cfg import GramCFG
from feature.binary.entropy_image import EntropyImage
from feature.binary.byte_histogram import ByteHistogram
from feature.binary.byte_entropy_map import ByteEntropyMap
from feature.binary.window_entropy_map import WindowEntropyMap

BINARY_FEATURES = [Ngram, GramCFG, EntropyImage, ByteHistogram, ByteEntropyMap, WindowEntropyMap]


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--input", required=True, type=str, help="The file path to process.")
    parser.add_argument("--host", required=False, type=str, default="localhost", help="Elasticsearch server host.")
    parser.add_argument("--port", required=False, type=int, default=9200, help="Elasticsearch server port.")

    args = vars(parser.parse_args())
    input_dir_path = os.path.join(args["input"], "raw")
    json_dir_path = os.path.join(args["input"], "json")

    input_file_list = retrieve(input_dir_path)
    json_file_list = retrieve(json_dir_path)

    data_processor = DataProcessor(host=args["host"], port=args["port"])

    print("[INFO] Insert raw data to Elasticsearch.")
    is_inserted = data_processor.insert_raw_data(file_list=input_file_list)
    if is_inserted is False:
        raise Exception("[ERROR] Failed to insert raw data in Elasticsearch.")

    print("[INFO] Update json info to Elasticsearch.")
    is_updated = data_processor.update_json_info(file_list=json_file_list)
    if is_updated is False:
        raise Exception("[ERROR] Failed to update json info.")

    print("[INFO] Insert binary feature data to Elasticsearch.")
    for feature_obj in BINARY_FEATURES:
        print("[INFO] Insert feature '{0}' data".format(feature_obj.__name__))

        is_inserted = data_processor.insert_feature(file_list=input_file_list, feature_obj=feature_obj)
        if is_inserted is False:
            print("[ERROR] Failed to insert feature '{0}' data in Elasticsearch.".format(feature_obj.__name__))

    data_processor.close()
    print("[INFO] Finished pipeline.")


if __name__ == "__main__":
    main()
