

from elasticsearch import Elasticsearch

from conf.elasticsearch_settings import INDEX_NAME_OF_RAW


class MalwareDatasetGenerator:
    def __init__(self, host="localhost", port=9200):
        self._client = Elasticsearch([{"host": host, "port": port}])
        if not self._client.ping():
            raise Exception("[ERROR] Invalid Elasticsearch connection.")

    def generate_dataset(self, file_type, number_of_data_per_class, feature_obj, dst_file_path):
        feature_name = feature_obj.__name__.lower()

        malware_uid_list = self._search_raw_data(file_type, number_of_data_per_class, feature_name, is_malware=True)
        malware_features = self._search_feature_data(malware_uid_list, feature_name)

        benign_uid_list = self._search_raw_data(file_type, number_of_data_per_class, feature_name, is_malware=False)
        benign_features = self._search_feature_data(benign_uid_list, feature_name)

        if (malware_features is None) or (benign_features is None):
            raise Exception("[ERROR] Invalid Dataset.")

        self.save_to_spa(malware_features, benign_features, dst_file_path)
        print("[INFO] Save malware detection dataset. [Path: {0}]".format(dst_file_path))

    def _search_raw_data(self, file_type, number_of_data, feature_name, is_malware):
        query = {"size": number_of_data,
                 "query": {"function_score": {"random_score": {},
                                              "query": {"bool": {"must": [{"term": {"FILE_TYPE": file_type}},
                                                                          {"term": {"IS_MALWARE": is_malware}},
                                                                          {"terms": {"FEATURES": [feature_name]}}]}}}}}

        try:
            response = self._client.search(index=INDEX_NAME_OF_RAW, body=query)

        except Exception:
            raise Exception("[ERROR] Invalid search.")

        uid_list = [doc["_id"] for doc in response["hits"]["hits"]]

        return uid_list

    def _search_feature_data(self, uid_list, feature_name):
        if len(uid_list) == 0:
            return None

        query = {"ids": uid_list}
        response = self._client.mget(index=feature_name, body=query)

        features = list()
        for doc in response["docs"]:
            features.append(doc["_source"]["DATA"])

        return features

    def save_to_spa(self, malware_features, benign_features, dst_file_path):
        dataset = list()
        dataset.extend(self._labeling(malware_features, label=1))
        dataset.extend(self._labeling(benign_features, label=0))

        with open(dst_file_path, "w") as file_descriptor:
            for data in dataset:
                file_descriptor.write(data)
                file_descriptor.write("\n")

    @staticmethod
    def _labeling(features, label):
        return ["{0} ".format(label) + feature for feature in features]
